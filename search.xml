<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>NGINX 基本概念</title>
    <url>/20191109/NGINX-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h4 id="什么是-NGINX"><a href="#什么是-NGINX" class="headerlink" title="什么是 NGINX"></a>什么是 NGINX</h4><p>Nginx 是一款高性能的 HTTP 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。由俄罗斯的程序设计师 Igor Sysoev 所开发，官方测试 Nginx 能够支支撑 5 万并发链接，并且 CPU、内存等资源消耗却非常低，运行非常稳定。</p>
<ol>
<li>http服务器：nginx是一个http服务器,可以用来提供独立的http服务,但其只能做静态资源(无法处理像tomcat提供servlet容器来创建动态网页)。</li>
<li>虚拟主机：可以实现在一台服务器虚拟出多个网站。例如个人网站使用的虚拟主机。</li>
<li>反向代理+负载均衡：通过反向代理的方式做到负载均衡。</li>
</ol>
<p>==反向代理==：就是说服务器集群时请求不是直接发给服务器,而是先到达反向代理服务器,然后反向代理服务器在发送到服务器。</p>
<p>==负载均衡==：就是说把请求分发给不同的服务器来处理,且要保证每个服务器处理请求的数量差不多,解决了单个服务器可能处理不过来的瓶颈,也就达到了高并发。</p>
<p>也就是说NGINX本身就已经达到了高性能、高并发。</p>
<h4 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h4><p>NGINX实现虚拟主机用三种方式：</p>
<ol>
<li>IP</li>
<li>端口号</li>
<li>域名</li>
</ol>
<h5 id="基于端口号"><a href="#基于端口号" class="headerlink" title="基于端口号"></a>基于端口号</h5><p>修改配置文件（/etc/nginx/nginx.conf）,如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动进程,通常设置成和 CPU 的数量相等</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    # epoll 是多路复用 IO(I/O Multiplexing) 中的一种方式</span><br><span class="line">    # 但是仅用于 linux2.6 以上内核,可以大大提高 nginx 的性能</span><br><span class="line">    use epoll;</span><br><span class="line">    # 单个后台 worker process 进程的最大并发链接数</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    # 设定 mime 类型,类型由 mime.type 文件定义</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">   server &#123;</span><br><span class="line">        # 监听的ip和端口，配置 ip:80</span><br><span class="line">        listen       80;</span><br><span class="line">        # 虚拟主机名称这里配置ip地址</span><br><span class="line"></span><br><span class="line">        server_name  ip;</span><br><span class="line">        # 所有的请求都以 / 开始，所有的请求都可以匹配此 location</span><br><span class="line">        location / &#123;</span><br><span class="line">            # 当访问 http://ip:端口号/时 访问的其实就是root 目录</span><br><span class="line">            root   /usr/share/nginx/wwwroot/webService;</span><br><span class="line">            # 指定欢迎页面，按从左到右顺序查找</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<h5 id="基于域名"><a href="#基于域名" class="headerlink" title="基于域名"></a>基于域名</h5><p>为本机配置虚拟路径映射,修改<code>C:\Windows\System32\drivers\etc</code> 下的hosts文件,添加如下映射<code>映射名 映射ip</code>,<br>其实就是你访问这个映射名时自动转换成ip。</p>
<p>我添加的映射</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello.t248.com 192.168.42.128</span><br><span class="line">welcome.t248.com 192.168.42.128</span><br></pre></td></tr></table></figure>

<p>修改配置文件nginx.conf,在指定的root目录加上需要访问的html,否则也看出效果qwq,配置如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  welcome.t248.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/share/nginx/wwwroot/htmlservice;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  hello.t248.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/share/nginx/wwwroot/htmlweb;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="反向代理和正向代理"><a href="#反向代理和正向代理" class="headerlink" title="反向代理和正向代理"></a>反向代理和正向代理</h4><p>代理就是说不用自己亲自去操作,而是告诉别人,让别人去做并且完成了告诉我结果就行了,就好像没有代理的话,我们只能去实体店去买东西,有了代理我们可以在网上买,等快递到了通知我们拿就行了。</p>
<h5 id="提高访问速度"><a href="#提高访问速度" class="headerlink" title="提高访问速度"></a>提高访问速度</h5><p>由于目标主机返回的数据会存放在代理服务器的硬盘中，因此下一次客户再访问相同的站点数据时，会直接从代理服务器的硬盘中读取，起到了缓存的作用，尤其对于热门站点能明显提高请求速度。</p>
<h5 id="防火墙作用"><a href="#防火墙作用" class="headerlink" title="防火墙作用"></a>防火墙作用</h5><p>由于所有的客户机请求都必须通过代理服务器访问远程站点，因此可在代理服务器上设限，过滤某些不安全信息。</p>
<h5 id="通过代理服务器访问不能访问的目标站点"><a href="#通过代理服务器访问不能访问的目标站点" class="headerlink" title="通过代理服务器访问不能访问的目标站点"></a>通过代理服务器访问不能访问的目标站点</h5><p>互联网上有许多开放的代理服务器，客户机在访问受限时，可通过不受限的代理服务器访问目标站点，通俗说，我们使用的翻墙浏览器就是利用了代理服务器，虽然不能出国，但也可直接访问外网。</p>
<h4 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h4><p>自己指定一个代理服务器,有代理服务器去请求指定的服务,服务端并不关心谁发出了请求,所以对客户端是透明的</p>
<p>常见应用场景：上google…</p>
<p><img src="https://www.funtl.com/assets/Lusifer2018080517010002.png" alt="image"></p>
<h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p>反向代理服务器架设在服务器端，通过缓冲经常被请求的页面来缓解服务器的工作量，将客户机请求转发给内部网络上的目标服务器；并将从服务器上得到的结果返回给 Internet 上请求连接的客户端，此时代理服务器与目标主机一起对外表现为一个服务器。也就是说对服务端透明,客户端并不知道处理自己请求的是哪一个服务器,且由反向代理服务器作为中间层也间接实现了防火墙的效果。</p>
<p><img src="https://www.funtl.com/assets/Lusifer2018080517010003.png" alt="image"></p>
<p>应用场景：现在许多大型 web 网站都用到反向代理。除了可以防止外网对内网服务器的恶性攻击、缓存以减少服务器的压力和访问安全控制之外，还可以进行负载均衡，将用户请求分配给多个服务器。</p>
<h4 id="使用-Nginx-反向代理-Tomcat"><a href="#使用-Nginx-反向代理-Tomcat" class="headerlink" title="使用 Nginx 反向代理 Tomcat"></a>使用 Nginx 反向代理 Tomcat</h4><h5 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h5><ul>
<li>两个 tomcat 服务通过 nginx 反向代理</li>
<li>nginx 服务器：192.168.42.128:80</li>
<li>tomcat1 服务器：192.168.42.128:9090</li>
<li>tomcat2 服务器：192.168.42.128:9091</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>redis 基本概念</title>
    <url>/20191107/redis-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h4 id="1-传统数据库的劣势"><a href="#1-传统数据库的劣势" class="headerlink" title="1.传统数据库的劣势"></a>1.传统数据库的劣势</h4><p>在比较大型的业务中,传统数据库的查询效率会越来越低,并且传统数据库的数据都是放到磁盘中,也就是查询时会进行频繁的I/O操作,因为磁盘读/写速度比较慢的问题而存在严重的性能弊端,如果同时涌来成千上万的请求,非常容易导致服务器瘫痪,甚至宕机。</p>
<h4 id="2-NOSQL的优势"><a href="#2-NOSQL的优势" class="headerlink" title="2.NOSQL的优势"></a>2.NOSQL的优势</h4><p>NoSQL数据库的出现就是为了应付上面的问题,一般数据都是存放到内存中,所以效率肯定快于传统数据库,并且还提供了持久化,就是说如果需要关闭NoSQL服务时,会自动把内存数据存到硬盘中,当服务重启时会自动导入硬盘数据。</p>
<h4 id="3-redis的优势"><a href="#3-redis的优势" class="headerlink" title="3.redis的优势"></a>3.redis的优势</h4><p>Redis和MongoDB是当前使用最广泛的NoSQL，而就Redis技术而言，它的性能十分优越，可以支持每秒十几万此的读/写操作，其性能远超数据库，并且还支持集群、分布式、主从同步等配置，原则上可以无限扩展，让更多的数据存储在内存中，更让人欣慰的是它还支持一定的事务能力，这保证了高并发的场景下数据的安全和一致性。</p>
<h4 id="4-使用java程序对redis进行读写"><a href="#4-使用java程序对redis进行读写" class="headerlink" title="4.使用java程序对redis进行读写"></a>4.使用java程序对redis进行读写</h4><p>怎么下载和安装就省略了,并且windows和linux方式也差不多,使用reids-server开启服务端,redis.conf配置一些初始化信息,reids-cli开启客户端。</p>
<p>程序中导入<code>jedis.jar</code>,这是java最底层的连接redis的工具jar。</p>
<p>redis里面支持很多种数据类型,比如String、list、set、zset、hash,一般情况下我们都是使用String,把对象类型序列化成json然后存入,取出时经过反序列化即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@Test  </span><br><span class="line">public void testJedisSingle() &#123;  </span><br><span class="line">    // 创建一个jedis对象  </span><br><span class="line">    Jedis jedis = new Jedis(&quot;lcoalhost&quot;, 6379);  </span><br><span class="line">    // 直接调用jedis对象的方法，方法名称和redis的命令一致  </span><br><span class="line">    //写</span><br><span class="line">    jedis.set(&quot;key1&quot;, &quot;test01&quot;);  </span><br><span class="line">    jedis.set(&quot;key2&quot;, &quot;test02&quot;);  </span><br><span class="line">    //读</span><br><span class="line">    String key1 = jedis.get(&quot;key1&quot;);  </span><br><span class="line">    String key2 = jedis.get(&quot;key2&quot;);  </span><br><span class="line">    System.out.println(key1 + &quot; &quot; + key2);  </span><br><span class="line">    // 关闭jedis  </span><br><span class="line">    jedis.close();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="5-Spring-boot集成redis"><a href="#5-Spring-boot集成redis" class="headerlink" title="5.Spring boot集成redis"></a>5.Spring boot集成redis</h4><p>spring boot内部已经集成了redis,我们只需要导入依赖即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>虽然默认集成了redis,且提供了一个redisTemplate来对redis进行操作,但该类默认没有实现序列化,因为spring boot条件注解机制的情况下,我们可以自己配置一个redisTemplate去取代默认的,代码如下,该方法实现了redisTemplate的String数据类型的序列化,然后再到网上找个redisUtils注入到IOC容器中,该类对redisTemplate进行了封装非常好用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#YML 配置redis信息</span><br><span class="line">spring:</span><br><span class="line">  ##### redis 配置开始  #####</span><br><span class="line">  redis:</span><br><span class="line">    database: 0</span><br><span class="line">    host: 192.168.42.128</span><br><span class="line">    port: 6379</span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">        max-idle: 10</span><br><span class="line">        max-wait: -1</span><br><span class="line">        max-active: 200</span><br><span class="line">        min-idle: 0</span><br><span class="line">    timeout: 1000</span><br><span class="line">    password: 123456</span><br><span class="line">    ##### redis 配置结束 #####</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.t248.appinfo.web.config;</span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line">import com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line">import org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class RedisConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @SuppressWarnings(&quot;all&quot;)</span><br><span class="line">    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory factory) &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = new ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();</span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        // hash的key也采用String的序列化方式</span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        // value序列化方式采用jackson</span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        // hash的value序列化方式采用jackson</span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        return template;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public RedisUtils beanUtils()&#123;</span><br><span class="line">        return new RedisUtils();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>测试2</title>
    <url>/20191027/%E6%B5%8B%E8%AF%952/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>测试一下</title>
    <url>/20191027/%E6%B5%8B%E8%AF%95%E4%B8%80%E4%B8%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
