<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>redis 基本概念</title>
    <url>/20191107/redis-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h4 id="1-传统数据库的劣势"><a href="#1-传统数据库的劣势" class="headerlink" title="1.传统数据库的劣势"></a>1.传统数据库的劣势</h4><p>在比较大型的业务中,传统数据库的查询效率会越来越低,并且传统数据库的数据都是放到磁盘中,也就是查询时会进行频繁的I/O操作,因为磁盘读/写速度比较慢的问题而存在严重的性能弊端,如果同时涌来成千上万的请求,非常容易导致服务器瘫痪,甚至宕机。</p>
<h4 id="2-NOSQL的优势"><a href="#2-NOSQL的优势" class="headerlink" title="2.NOSQL的优势"></a>2.NOSQL的优势</h4><p>NoSQL数据库的出现就是为了应付上面的问题,一般数据都是存放到内存中,所以效率肯定快于传统数据库,并且还提供了持久化,就是说如果需要关闭NoSQL服务时,会自动把内存数据存到硬盘中,当服务重启时会自动导入硬盘数据。</p>
<h4 id="3-redis的优势"><a href="#3-redis的优势" class="headerlink" title="3.redis的优势"></a>3.redis的优势</h4><p>Redis和MongoDB是当前使用最广泛的NoSQL，而就Redis技术而言，它的性能十分优越，可以支持每秒十几万此的读/写操作，其性能远超数据库，并且还支持集群、分布式、主从同步等配置，原则上可以无限扩展，让更多的数据存储在内存中，更让人欣慰的是它还支持一定的事务能力，这保证了高并发的场景下数据的安全和一致性。</p>
<h4 id="4-使用java程序对redis进行读写"><a href="#4-使用java程序对redis进行读写" class="headerlink" title="4.使用java程序对redis进行读写"></a>4.使用java程序对redis进行读写</h4><p>怎么下载和安装就省略了,并且windows和linux方式也差不多,使用reids-server开启服务端,redis.conf配置一些初始化信息,reids-cli开启客户端。</p>
<p>程序中导入<code>jedis.jar</code>,这是java最底层的连接redis的工具jar。</p>
<p>redis里面支持很多种数据类型,比如String、list、set、zset、hash,一般情况下我们都是使用String,把对象类型序列化成json然后存入,取出时经过反序列化即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@Test  </span><br><span class="line">public void testJedisSingle() &#123;  </span><br><span class="line">    // 创建一个jedis对象  </span><br><span class="line">    Jedis jedis = new Jedis(&quot;lcoalhost&quot;, 6379);  </span><br><span class="line">    // 直接调用jedis对象的方法，方法名称和redis的命令一致  </span><br><span class="line">    //写</span><br><span class="line">    jedis.set(&quot;key1&quot;, &quot;test01&quot;);  </span><br><span class="line">    jedis.set(&quot;key2&quot;, &quot;test02&quot;);  </span><br><span class="line">    //读</span><br><span class="line">    String key1 = jedis.get(&quot;key1&quot;);  </span><br><span class="line">    String key2 = jedis.get(&quot;key2&quot;);  </span><br><span class="line">    System.out.println(key1 + &quot; &quot; + key2);  </span><br><span class="line">    // 关闭jedis  </span><br><span class="line">    jedis.close();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="5-Spring-boot集成redis"><a href="#5-Spring-boot集成redis" class="headerlink" title="5.Spring boot集成redis"></a>5.Spring boot集成redis</h4><p>spring boot内部已经集成了redis,我们只需要导入依赖即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>虽然默认集成了redis,且提供了一个redisTemplate来对redis进行操作,但该类默认没有实现序列化,因为spring boot条件注解机制的情况下,我们可以自己配置一个redisTemplate去取代默认的,代码如下,该方法实现了redisTemplate的String数据类型的序列化,然后再到网上找个redisUtils注入到IOC容器中,该类对redisTemplate进行了封装非常好用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#YML 配置redis信息</span><br><span class="line">spring:</span><br><span class="line">  ##### redis 配置开始  #####</span><br><span class="line">  redis:</span><br><span class="line">    database: 0</span><br><span class="line">    host: 192.168.42.128</span><br><span class="line">    port: 6379</span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">        max-idle: 10</span><br><span class="line">        max-wait: -1</span><br><span class="line">        max-active: 200</span><br><span class="line">        min-idle: 0</span><br><span class="line">    timeout: 1000</span><br><span class="line">    password: 123456</span><br><span class="line">    ##### redis 配置结束 #####</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.t248.appinfo.web.config;</span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line">import com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line">import org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class RedisConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @SuppressWarnings(&quot;all&quot;)</span><br><span class="line">    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory factory) &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = new ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();</span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        // hash的key也采用String的序列化方式</span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        // value序列化方式采用jackson</span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        // hash的value序列化方式采用jackson</span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        return template;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public RedisUtils beanUtils()&#123;</span><br><span class="line">        return new RedisUtils();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>测试2</title>
    <url>/20191027/%E6%B5%8B%E8%AF%952/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>测试一下</title>
    <url>/20191027/%E6%B5%8B%E8%AF%95%E4%B8%80%E4%B8%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
